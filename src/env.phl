module env;

import err;

/* muisti yms */
class @Environment {
	field @Integer[] memory;
	field @Integer[][] stack;
	
	field @Integer[] call_stack;
	field @Integer instruction_pointer;
	
	new [
		this::stack = new @Integer[][];
		this::stack.add(new @Integer[]);
		this::memory = new @Integer[].alloc(1000); /* Huom! Muistin koko -- muuta tarpeiden mukaan */
		this::call_stack = new @Integer[];
	]
	
	@Void push(@Integer i) [
		this::stack::last.add(i);
	]
	
	@Integer pop [
		if (this::stack::last::size == 0)
			err("stack underflow");
		return this::stack::last.remove(this::stack::last::size-1);
	]
	
	@Integer peek [
		if (this::stack::last::size == 0)
			err("stack underflow");
		return this::stack::last[this::stack::last::size-1];
	]
	
	@Void pushp(@Integer psize, @Integer to_ip) [
		this::stack.add(new @Integer[]);
		psize times [
			this.push(this::stack[this::stack::size-2].remove(-(1)));
		];
		this::call_stack.add(this::instruction_pointer);
		this::instruction_pointer = to_ip;
	]
	
	@Void popr [
		var rval = peek();
		this::instruction_pointer = this::call_stack.remove(-(1));
		this::stack.remove(-(1));
		push(rval);
	]
	
	@Void swap [
		var tmp = pop();
		var tmp2 = pop();
		push(tmp);
		push(tmp2);
	]
	
	@Void dup [
		push(peek());
	]
	
	@Void over [
		if (this::stack::last::size == 0)
			err("stack underflow");
		push(this::stack::last[0]);
	]
	
	@Void dupt [
		var addr = pop();
		this::stack::last[addr] = pop();
	]
	
	@Void overf [
		push(this::stack::last[pop()]);
	]
};

